name: Continuous integration

on:
  push:
    branches:
      - main


jobs:
  cicd:
    name: CI CD
    runs-on: ubuntu-20.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws_account_id: "499490329151"
      region: ap-east-1
      ecr_name: demo-project-ecr-dev
      eks_name: demo-project-eks-dev
      app_name: helloworld

    steps:
      - name: Check out app repository
        uses: actions/checkout@v2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        # Override language selection by uncommenting this and choosing your languages
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below).
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1

      # - name: Perform CodeQL Analysis
      #   uses: github/codeql-action/analyze@v1

      - name: Build Image
        run: |-
          echo $GITHUB_SHA
          docker login -u AWS -p $(aws ecr get-login-password --region ${{ env.region }}) ${{ env.aws_account_id }}.dkr.ecr.${{ env.region }}.amazonaws.com

          docker build -f ./Dockerfile \
            --tag "${{ env.aws_account_id }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_name }}:$GITHUB_SHA" \
            ./

          docker push "${{ env.aws_account_id }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_name }}:$GITHUB_SHA"
        shell: bash

      - name: Scan Image
        run: |-
          aws ecr wait image-scan-complete --repository-name ${{ env.ecr_name }} \
            --image-id imageTag=$GITHUB_SHA \
            --region ${{ env.region }}

          if [ $(echo $?) -eq 0 ]; then
            SCAN_FINDINGS=$(aws ecr describe-image-scan-findings --repository-name ${{ env.ecr_name }} \
            --image-id imageTag=$GITHUB_SHA \
            --region ${{ env.region }} | jq '.imageScanFindings.findingSeverityCounts')

            CRITICAL=$(echo $SCAN_FINDINGS | jq '.CRITICAL')
            HIGH=$(echo $SCAN_FINDINGS | jq '.HIGH')
            MEDIUM=$(echo $SCAN_FINDINGS | jq '.MEDIUM')
            LOW=$(echo $SCAN_FINDINGS | jq '.LOW')
            INFORMATIONAL=$(echo $SCAN_FINDINGS | jq '.INFORMATIONAL')
            UNDEFINED=$(echo $SCAN_FINDINGS | jq '.UNDEFINED')

            if [ $CRITICAL != null ] || [ $HIGH != null ]; then
              echo Docker image contains vulnerabilities at CRITICAL or HIGH level
              aws ecr batch-delete-image --repository-name my-repo --image-ids imageTag=v0.1  #delete pushed image from container registry
              exit 1  #exit execution due to docker image vulnerabilities
            fi
          fi

        shell: bash

      - name: Deploy App
        run: |-
          aws eks update-kubeconfig --name ${{ env.eks_name }} --region ${{ env.region }}

          helm package --app-version $GITHUB_SHA  ./helm
          helm upgrade ${{ env.app_name }} ./app-service-1.0.0.tgz \
            --install --atomic --timeout 5m \
            --namespace default \
            --set image.repository="${{ env.aws_account_id }}.dkr.ecr.${{ env.region }}.amazonaws.com/${{ env.ecr_name }}" \
            --set image.tag="$GITHUB_SHA" \
            --set fullnameOverride="${{ env.app_name }}" \
          kubectl get svc ${{ env.app_name }} -o=custom-columns="NAME:.metadata.name,EXTERNAL-IP:.status.loadBalancer.ingress[0].hostname"
        shell: bash

